/*
 * Library
 *
 * Demo Library API
 *
 * API version: 1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package swagger

import (
	"net/http"
	"time"

	"github.com/prometheus/client_golang/prometheus"
	"github.com/prometheus/client_golang/prometheus/promhttp"
)

// Declare Prometheus metrics
var (
	requestsTotal = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "http_requests_total",
			Help: "Total number of HTTP requests",
		},
		[]string{"method", "path"},
	)

	requestsStatus = prometheus.NewCounterVec(
		prometheus.CounterOpts{
			Name: "http_requests_status_total",
			Help: "Total number of HTTP requests per status code",
		},
		[]string{"status"},
	)

	requestDuration = prometheus.NewHistogramVec(
		prometheus.HistogramOpts{
			Name:    "http_request_duration_seconds",
			Help:    "Duration of HTTP requests in seconds",
			Buckets: prometheus.DefBuckets,
		},
		[]string{"method", "path"},
	)
)

func init() {
	// Register metrics with Prometheus's default registry
	prometheus.MustRegister(requestsTotal)
	prometheus.MustRegister(requestsStatus)
	prometheus.MustRegister(requestDuration)
}

// Middleware to collect metrics
func MetricsMiddleware(next http.Handler) http.Handler {
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		start := time.Now()

		wrappedWriter := &statusWriter{ResponseWriter: w, statusCode: http.StatusOK}
		next.ServeHTTP(wrappedWriter, r)

		duration := time.Since(start).Seconds()

		// Collect metrics
		requestsTotal.WithLabelValues(r.Method, r.URL.Path).Inc()
		requestsStatus.WithLabelValues(http.StatusText(wrappedWriter.statusCode)).Inc()
		requestDuration.WithLabelValues(r.Method, r.URL.Path).Observe(duration)
	})
}

// Handler to expose metrics
func PromHandler() http.Handler {
	return promhttp.Handler()
}

// Custom ResponseWriter to capture status codes
type statusWriter struct {
	http.ResponseWriter
	statusCode int
}

func (w *statusWriter) WriteHeader(statusCode int) {
	w.statusCode = statusCode
	w.ResponseWriter.WriteHeader(statusCode)
}
